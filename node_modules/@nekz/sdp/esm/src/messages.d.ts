import type { SourceDemoBuffer } from './buffer.js';
import type { SourceDemo } from './demo.js';
import { CmdInfo } from './types/CmdInfo.js';
import type { SendTable, ServerClassInfo } from './types/DataTables.js';
import { NetMessage } from './types/NetMessages.js';
import type { StringTable as StringTableType } from './types/StringTables.js';
import type { UserCmd as UserCmdType } from './types/UserCmd.js';
export declare class Message {
    type: number;
    tick?: number;
    slot?: number;
    constructor(type: number);
    static default(type: number): Message;
    getType(): number | undefined;
    getName(): string;
    getTick(): number | undefined;
    getSlot(): number | undefined;
    setTick(tick: number): this;
    setSlot(slot: number): this;
    read(_buf: SourceDemoBuffer, _demo: SourceDemo): Message;
    write(_buf: SourceDemoBuffer, _demo: SourceDemo): Message;
}
export declare class Packet extends Message {
    packets?: NetMessage[];
    cmdInfo?: CmdInfo[];
    inSequence?: number;
    outSequence?: number;
    data?: SourceDemoBuffer;
    restData?: SourceDemoBuffer;
    constructor(type: number);
    findPacket<T extends NetMessage>(type: (new (type: number) => T) | ((packet: NetMessage) => boolean)): T | undefined;
    findPackets<T extends NetMessage>(type: (new (type: number) => T) | ((packet: NetMessage) => boolean)): T[];
    read(buf: SourceDemoBuffer, demo: SourceDemo): Packet;
    write(buf: SourceDemoBuffer): Packet;
    [Symbol.iterator](): Generator<NetMessage>;
}
export declare class SignOn extends Packet {
}
export declare class SyncTick extends Message {
    read(): SyncTick;
    write(): SyncTick;
}
export declare class ConsoleCmd extends Message {
    command?: string;
    read(buf: SourceDemoBuffer): ConsoleCmd;
    write(buf: SourceDemoBuffer): ConsoleCmd;
}
export declare class UserCmd extends Message {
    cmd?: number;
    data?: SourceDemoBuffer;
    userCmd?: UserCmdType;
    restData?: SourceDemoBuffer;
    read(buf: SourceDemoBuffer): UserCmd;
    write(buf: SourceDemoBuffer): UserCmd;
}
export declare class DataTable extends Message {
    data?: SourceDemoBuffer;
    dataTable?: {
        tables: SendTable[];
        serverClasses: ServerClassInfo[];
        restData?: SourceDemoBuffer;
    };
    read(buf: SourceDemoBuffer): DataTable;
    write(buf: SourceDemoBuffer): DataTable;
}
export declare class Stop extends Message {
    restData?: SourceDemoBuffer;
    read(buf: SourceDemoBuffer): Stop;
    write(buf: SourceDemoBuffer): Stop;
}
export declare class CustomData extends Message {
    unk?: number;
    data?: SourceDemoBuffer;
    read(buf: SourceDemoBuffer): CustomData;
    write(buf: SourceDemoBuffer): CustomData;
}
export declare class StringTable extends Message {
    data?: SourceDemoBuffer;
    stringTables?: StringTableType[];
    restData?: SourceDemoBuffer;
    read(buf: SourceDemoBuffer): StringTable;
    write(buf: SourceDemoBuffer): StringTable;
}
export declare const DemoMessages: {
    NewEngine: (typeof Packet | typeof SyncTick | typeof ConsoleCmd | typeof DataTable | typeof Stop | typeof CustomData | undefined)[];
    OldEngine: (typeof Packet | typeof SyncTick | typeof ConsoleCmd | typeof DataTable | typeof Stop | undefined)[];
    Message: typeof Message;
    SignOn: typeof SignOn;
    Packet: typeof Packet;
    SyncTick: typeof SyncTick;
    ConsoleCmd: typeof ConsoleCmd;
    UserCmd: typeof UserCmd;
    DataTable: typeof DataTable;
    Stop: typeof Stop;
    CustomData: typeof CustomData;
    StringTable: typeof StringTable;
};
//# sourceMappingURL=messages.d.ts.map