import { SoundInfo } from './SoundInfo.js';
import { type GameEvent } from './GameEventManager.js';
import { SourceDemoBuffer } from '../buffer.js';
import type { SourceDemo } from '../demo.js';
import type { Vector } from './Vector.js';
import { type UserMessage } from './UserMessages.js';
export declare class NetMessage {
    type: number;
    constructor(type: number);
    getType(): number;
    getName(): string;
    read(_buf: SourceDemoBuffer, _demo: SourceDemo): void;
    write(_buf: SourceDemoBuffer, _demo: SourceDemo): void;
}
export declare class NetNop extends NetMessage {
    read(): void;
    write(): void;
}
export declare class NetDisconnect extends NetMessage {
    text?: string;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class NetFile extends NetMessage {
    transferId?: number;
    fileName?: string;
    fileRequested?: boolean;
    unk?: boolean;
    read(buf: SourceDemoBuffer, demo: SourceDemo): void;
    write(buf: SourceDemoBuffer, demo: SourceDemo): void;
}
export declare class NetSplitScreenUser extends NetMessage {
    unk?: boolean;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class NetTick extends NetMessage {
    tick?: number;
    hostFrameTime?: number;
    hostFrameTimeStdDeviation?: number;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class NetStringCmd extends NetMessage {
    command?: string;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class NetSetConVar extends NetMessage {
    convars?: {
        name: string;
        value: string;
    }[];
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class NetSignonState extends NetMessage {
    signonState?: number;
    spawnCount?: number;
    numServerPlayers?: number;
    playersNetworkIdsCount?: number;
    playersNetworkIds?: Uint8Array;
    mapNameLength?: number;
    mapName?: string;
    read(buf: SourceDemoBuffer, demo: SourceDemo): void;
    write(buf: SourceDemoBuffer, demo: SourceDemo): void;
}
export declare class SvcServerInfo extends NetMessage {
    protocol?: number;
    serverCount?: number;
    isHltv?: boolean;
    isDedicated?: boolean;
    clientCrc?: number;
    maxClasses?: number;
    mapCrc?: number;
    playerSlot?: number;
    maxClients?: number;
    unk?: number;
    tickInterval?: number;
    cOs?: string;
    gameDir?: string;
    mapName?: string;
    skyName?: string;
    hostName?: string;
    read(buf: SourceDemoBuffer, demo: SourceDemo): void;
    write(buf: SourceDemoBuffer, demo: SourceDemo): void;
}
export declare class SvcSendTable extends NetMessage {
    needsDecoder?: boolean;
    propsLength?: number;
    props?: number;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class SvcClassInfo extends NetMessage {
    length?: number;
    createOnClient?: boolean;
    serverClasses?: {
        classId: number;
        className: string;
        dataTableName: string;
    }[];
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class SvcSetPause extends NetMessage {
    paused?: boolean;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class SvcCreateStringTable extends NetMessage {
    name?: string;
    maxEntries?: number;
    numEntries?: number;
    userDataFixedSize?: boolean;
    userDataSize?: number;
    userDataSizeBits?: number;
    flags?: number;
    stringDataLength?: number;
    stringData?: SourceDemoBuffer;
    read(buf: SourceDemoBuffer, demo: SourceDemo): void;
    write(buf: SourceDemoBuffer, demo: SourceDemo): void;
}
export declare class SvcUpdateStringTable extends NetMessage {
    tableId?: number;
    numChangedEntries?: number;
    stringDataLength?: number;
    stringData?: SourceDemoBuffer;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class SvcVoiceInit extends NetMessage {
    codec?: string;
    quality?: number;
    unk?: number;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class SvcVoiceData extends NetMessage {
    client?: number;
    proximity?: number;
    voiceDataLength?: number;
    voiceData?: SourceDemoBuffer;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class SvcPrint extends NetMessage {
    message?: string;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class SvcSounds extends NetMessage {
    reliableSound?: boolean;
    soundsLength?: number;
    soundsDataLength?: number;
    soundsData?: SourceDemoBuffer;
    sounds?: SoundInfo[];
    read(buf: SourceDemoBuffer, demo: SourceDemo): void;
    write(buf: SourceDemoBuffer, demo: SourceDemo): void;
}
export declare class SvcSetView extends NetMessage {
    entityIndex?: number;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class SvcFixAngle extends NetMessage {
    relative?: boolean;
    angle?: [number, number, number];
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class SvcCrosshairAngle extends NetMessage {
    angle?: [number, number, number];
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class SvcBspDecal extends NetMessage {
    pos?: Vector;
    decalTextureIndex?: number;
    entityIndex?: number;
    modelIndex?: number;
    lowPriority?: boolean;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class SvcSplitScreen extends NetMessage {
    unk?: number;
    dataLength?: number;
    data?: SourceDemoBuffer;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class SvcUserMessage extends NetMessage {
    msgType?: number;
    msgDataLength?: number;
    msgData?: SourceDemoBuffer;
    userMessage?: UserMessage;
    read(buf: SourceDemoBuffer, demo: SourceDemo): void;
    write(buf: SourceDemoBuffer, demo: SourceDemo): void;
}
export declare class SvcEntityMessage extends NetMessage {
    entityIndex?: number;
    classId?: number;
    dataLength?: number;
    data?: SourceDemoBuffer;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class SvcGameEvent extends NetMessage {
    event?: GameEvent;
    data?: SourceDemoBuffer;
    read(buf: SourceDemoBuffer, demo: SourceDemo): void;
    write(buf: SourceDemoBuffer, demo: SourceDemo): void;
}
export declare class SvcPacketEntities extends NetMessage {
    maxEntries?: number;
    isDelta?: boolean;
    deltaFrom?: number;
    baseLine?: boolean;
    updatedEntries?: number;
    updateBaseline?: boolean;
    dataLength?: number;
    data?: SourceDemoBuffer;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class SvcTempEntities extends NetMessage {
    numEntries?: number;
    dataLength?: number;
    data?: SourceDemoBuffer;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class SvcPrefetch extends NetMessage {
    soundIndex?: number;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class SvcMenu extends NetMessage {
    menuType?: number;
    dataLength?: number;
    data?: SourceDemoBuffer;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class SvcGameEventList extends NetMessage {
    events?: number;
    dataLength?: number;
    data?: SourceDemoBuffer;
    read(buf: SourceDemoBuffer, demo: SourceDemo): void;
    write(buf: SourceDemoBuffer, demo: SourceDemo): void;
}
export declare class SvcGetCvarValue extends NetMessage {
    cookie?: number;
    cvarName?: string;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class SvcCmdKeyValues extends NetMessage {
    buffer?: Uint8Array;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class SvcPaintMapData extends NetMessage {
    dataLength?: number;
    data?: SourceDemoBuffer;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare const NetMessages: {
    Portal2Engine: (typeof NetMessage | undefined)[];
    HalfLife2Engine: (typeof NetMessage | undefined)[];
    NetMessage: typeof NetMessage;
    NetNop: typeof NetNop;
    NetDisconnect: typeof NetDisconnect;
    NetFile: typeof NetFile;
    NetSplitScreenUser: typeof NetSplitScreenUser;
    NetTick: typeof NetTick;
    NetStringCmd: typeof NetStringCmd;
    NetSetConVar: typeof NetSetConVar;
    NetSignonState: typeof NetSignonState;
    SvcServerInfo: typeof SvcServerInfo;
    SvcSendTable: typeof SvcSendTable;
    SvcClassInfo: typeof SvcClassInfo;
    SvcSetPause: typeof SvcSetPause;
    SvcCreateStringTable: typeof SvcCreateStringTable;
    SvcUpdateStringTable: typeof SvcUpdateStringTable;
    SvcVoiceInit: typeof SvcVoiceInit;
    SvcVoiceData: typeof SvcVoiceData;
    SvcPrint: typeof SvcPrint;
    SvcSounds: typeof SvcSounds;
    SvcSetView: typeof SvcSetView;
    SvcFixAngle: typeof SvcFixAngle;
    SvcCrosshairAngle: typeof SvcCrosshairAngle;
    SvcBspDecal: typeof SvcBspDecal;
    SvcSplitScreen: typeof SvcSplitScreen;
    SvcUserMessage: typeof SvcUserMessage;
    SvcEntityMessage: typeof SvcEntityMessage;
    SvcGameEvent: typeof SvcGameEvent;
    SvcPacketEntities: typeof SvcPacketEntities;
    SvcTempEntities: typeof SvcTempEntities;
    SvcPrefetch: typeof SvcPrefetch;
    SvcMenu: typeof SvcMenu;
    SvcGameEventList: typeof SvcGameEventList;
    SvcGetCvarValue: typeof SvcGetCvarValue;
    SvcCmdKeyValues: typeof SvcCmdKeyValues;
    SvcPaintMapData: typeof SvcPaintMapData;
};
//# sourceMappingURL=NetMessages.d.ts.map