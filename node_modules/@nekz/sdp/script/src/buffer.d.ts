import { BitStream, type BitView } from './lib/bit-buffer.js';
import { QAngle } from './types/QAngle.js';
import { Vector } from './types/Vector.js';
export declare class SourceDemoBuffer extends BitStream {
    constructor(source: ArrayBuffer | BitView, byteOffset?: number, byteLength?: number);
    static from(buffer: SourceDemoBuffer): SourceDemoBuffer;
    static allocate(bytes: number): SourceDemoBuffer;
    static allocateBits(bits: number): SourceDemoBuffer;
    clone(): SourceDemoBuffer;
    reset(): SourceDemoBuffer;
    readVarInt32(): number;
    readVector(): Vector;
    writeVector(vec: Vector): void;
    readQAngle(): QAngle;
    writeQAngle(ang: QAngle): void;
    readCoord(): number;
    writeCoord(value: number): void;
    readVectorCoord(): Vector;
    writeVectorCoord(vec: Vector): void;
    readAngles(): QAngle;
    writeAngles(angle: QAngle): void;
    readField(bits: number, fallbackValue?: number): number;
    writeField(field: number, bits: number, fallbackValue?: number): void;
    readFieldThen(bits: number, fallbackValue: number, callback: (bits: number) => void): number | void;
    writeFieldThen(field: number, bits: number, fallbackValue: number, callback: (bits: number) => void): void;
    readBitStream(bitLength: number): SourceDemoBuffer;
    writeBitStream(stream: BitStream, length: number): void;
    writeArrayBuffer(buffer: ArrayBuffer, byteLength: number): void;
}
//# sourceMappingURL=buffer.d.ts.map