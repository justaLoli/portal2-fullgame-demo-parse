"use strict";
// Copyright (c) 2023-2024, NeKz
// SPDX-License-Identifier: MIT
Object.defineProperty(exports, "__esModule", { value: true });
exports.readSarMessages = exports.readSarMessageData = exports.ChecksumV2State = exports.SarDataType = void 0;
exports.isSarMessage = isSarMessage;
const messages_js_1 = require("../messages.js");
var SarDataType;
(function (SarDataType) {
    SarDataType[SarDataType["TimescaleCheat"] = 1] = "TimescaleCheat";
    SarDataType[SarDataType["InitialCvar"] = 2] = "InitialCvar";
    SarDataType[SarDataType["EntityInput"] = 3] = "EntityInput";
    SarDataType[SarDataType["EntityInputSlot"] = 4] = "EntityInputSlot";
    SarDataType[SarDataType["PortalPlacement"] = 5] = "PortalPlacement";
    SarDataType[SarDataType["ChallengeFlags"] = 6] = "ChallengeFlags";
    SarDataType[SarDataType["CrouchFly"] = 7] = "CrouchFly";
    SarDataType[SarDataType["Pause"] = 8] = "Pause";
    SarDataType[SarDataType["WaitRun"] = 9] = "WaitRun";
    SarDataType[SarDataType["SpeedrunTime"] = 10] = "SpeedrunTime";
    SarDataType[SarDataType["Timestamp"] = 11] = "Timestamp";
    SarDataType[SarDataType["FileChecksum"] = 12] = "FileChecksum";
    SarDataType[SarDataType["HwaitRun"] = 13] = "HwaitRun";
    SarDataType[SarDataType["Checksum"] = 255] = "Checksum";
    SarDataType[SarDataType["ChecksumV2"] = 254] = "ChecksumV2";
    SarDataType[SarDataType["Invalid"] = -1] = "Invalid";
})(SarDataType || (exports.SarDataType = SarDataType = {}));
var ChecksumV2State;
(function (ChecksumV2State) {
    ChecksumV2State[ChecksumV2State["None"] = 0] = "None";
    ChecksumV2State[ChecksumV2State["Invalid"] = 1] = "Invalid";
    ChecksumV2State[ChecksumV2State["Valid"] = 2] = "Valid";
})(ChecksumV2State || (exports.ChecksumV2State = ChecksumV2State = {}));
function isSarMessage(type) {
    return function (message) {
        return message.type === type;
    };
}
// _parse_sar_data
const readSarMessageData = (data, len) => {
    if (len === 0) {
        return { type: SarDataType.Invalid };
    }
    const type = data.readUint8();
    if (type === SarDataType.Checksum && len === 5) {
        len = 9;
    }
    switch (type) {
        case SarDataType.TimescaleCheat:
            if (len !== 5) {
                return { type: SarDataType.Invalid };
            }
            return {
                type,
                timescale: data.readFloat32(),
            };
        case SarDataType.InitialCvar:
            return {
                type,
                cvar: data.readASCIIString(),
                val: data.readASCIIString(),
            };
        case SarDataType.EntityInputSlot:
            return {
                type,
                slot: data.readUint8(),
                targetname: data.readASCIIString(),
                classname: data.readASCIIString(),
                inputname: data.readASCIIString(),
                parameter: data.readASCIIString(),
            };
        case SarDataType.EntityInput:
            return {
                type,
                targetname: data.readASCIIString(),
                classname: data.readASCIIString(),
                inputname: data.readASCIIString(),
                parameter: data.readASCIIString(),
            };
        case SarDataType.Checksum:
            if (len !== 9) {
                return { type: SarDataType.Invalid };
            }
            return {
                type,
                demoSum: data.readUint32(),
                sarSum: data.readUint32(),
            };
        case SarDataType.ChecksumV2:
            if (len !== 69) {
                return { type: SarDataType.Invalid };
            }
            return {
                type,
                sarSum: data.readUint32(),
                signature: data.readArrayBuffer(64),
            };
        case SarDataType.PortalPlacement:
            if (len !== 15) {
                return { type: SarDataType.Invalid };
            }
            return {
                type,
                slot: data.readUint8(),
                orange: Boolean(data.readUint8()),
                x: data.readFloat32(),
                y: data.readFloat32(),
                z: data.readFloat32(),
            };
        case SarDataType.ChallengeFlags:
        case SarDataType.CrouchFly:
            if (len !== 2) {
                return { type: SarDataType.Invalid };
            }
            return {
                type,
                slot: data.readUint8(),
            };
        case SarDataType.Pause:
            if (len !== 5 && len !== 6) {
                return { type: SarDataType.Invalid };
            }
            return {
                type,
                pauseTicks: data.readUint32(),
                isTimed: len === 6 ? Boolean(data.readUint8()) : undefined,
            };
        case SarDataType.WaitRun:
            if (len < 6) {
                return { type: SarDataType.Invalid };
            }
            return {
                type,
                tick: data.readUint32(),
                cmd: data.readASCIIString(),
            };
        case SarDataType.HwaitRun:
            if (len < 6) {
                return { type: SarDataType.Invalid };
            }
            return {
                type,
                ticks: data.readUint32(),
                cmd: data.readASCIIString(),
            };
        case SarDataType.SpeedrunTime: {
            if (len < 5) {
                return { type: SarDataType.Invalid };
            }
            const out = {
                type,
                nsplits: data.readUint32(),
                splits: [],
            };
            for (let i = 0; i < out.nsplits; ++i) {
                const split = {
                    name: data.readASCIIString(),
                    nsegs: data.readUint32(),
                    segs: [],
                };
                for (let j = 0; j < split.nsegs; ++j) {
                    split.segs.push({
                        name: data.readASCIIString(),
                        ticks: data.readUint32(),
                    });
                }
                out.splits.push(split);
            }
            if (data.bitsLeft) {
                return { type: SarDataType.Invalid };
            }
            return out;
        }
        case SarDataType.Timestamp:
            if (len !== 8) {
                return { type: SarDataType.Invalid };
            }
            return {
                type,
                year: data.readUint8() | (data.readUint8() << 8),
                mon: data.readUint8() + 1,
                day: data.readUint8(),
                hour: data.readUint8(),
                min: data.readUint8(),
                sec: data.readUint8(),
            };
        case SarDataType.FileChecksum:
            if (len < 6) {
                return { type: SarDataType.Invalid };
            }
            return {
                type,
                sum: data.readUint32(),
                path: data.readASCIIString(),
            };
        default:
            return { type: SarDataType.Invalid };
    }
};
exports.readSarMessageData = readSarMessageData;
const readSarMessages = (demo) => {
    const messages = [];
    for (const message of demo.findMessages(messages_js_1.DemoMessages.CustomData)) {
        const data = message.data;
        // _parse_msg
        if (message.unk !== 0 || data.length === 64) {
            continue;
        }
        data.readArrayBuffer(8);
        const len = (data.length / 8) - 8;
        messages.push((0, exports.readSarMessageData)(data, len));
    }
    return messages;
};
exports.readSarMessages = readSarMessages;
