"use strict";
// Copyright (c) 2024, NeKz
// SPDX-License-Identifier: MIT
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPlayerSteamData = exports.SteamIdResult = exports.SteamId = exports.SteamIdInstance = exports.SteamIdType = exports.SteamIdUniverse = void 0;
var SteamIdUniverse;
(function (SteamIdUniverse) {
    SteamIdUniverse[SteamIdUniverse["Individual"] = 0] = "Individual";
    SteamIdUniverse[SteamIdUniverse["Public"] = 1] = "Public";
    SteamIdUniverse[SteamIdUniverse["Beta"] = 2] = "Beta";
    SteamIdUniverse[SteamIdUniverse["Internal"] = 3] = "Internal";
    SteamIdUniverse[SteamIdUniverse["Dev"] = 4] = "Dev";
    SteamIdUniverse[SteamIdUniverse["Rc"] = 5] = "Rc";
})(SteamIdUniverse || (exports.SteamIdUniverse = SteamIdUniverse = {}));
var SteamIdType;
(function (SteamIdType) {
    SteamIdType[SteamIdType["Invalid"] = 0] = "Invalid";
    SteamIdType[SteamIdType["Individual"] = 1] = "Individual";
    SteamIdType[SteamIdType["Multiseat"] = 2] = "Multiseat";
    SteamIdType[SteamIdType["GameServer"] = 3] = "GameServer";
    SteamIdType[SteamIdType["AnonGameServer"] = 4] = "AnonGameServer";
    SteamIdType[SteamIdType["Pending"] = 5] = "Pending";
    SteamIdType[SteamIdType["ContentServer"] = 6] = "ContentServer";
    SteamIdType[SteamIdType["Clan"] = 7] = "Clan";
    SteamIdType[SteamIdType["Chat"] = 8] = "Chat";
    SteamIdType[SteamIdType["P2PSuperSeeder"] = 9] = "P2PSuperSeeder";
    SteamIdType[SteamIdType["AnonUser"] = 10] = "AnonUser";
})(SteamIdType || (exports.SteamIdType = SteamIdType = {}));
var SteamIdInstance;
(function (SteamIdInstance) {
    SteamIdInstance[SteamIdInstance["All"] = 0] = "All";
    SteamIdInstance[SteamIdInstance["Desktop"] = 1] = "Desktop";
    SteamIdInstance[SteamIdInstance["Console"] = 2] = "Console";
    SteamIdInstance[SteamIdInstance["Web"] = 4] = "Web";
})(SteamIdInstance || (exports.SteamIdInstance = SteamIdInstance = {}));
class SteamId {
    constructor(props) {
        Object.defineProperty(this, "universe", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: BigInt(SteamIdUniverse.Public)
        });
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: BigInt(SteamIdType.Individual)
        });
        Object.defineProperty(this, "instance", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: BigInt(SteamIdInstance.Desktop)
        });
        Object.defineProperty(this, "account", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0n
        });
        Object.defineProperty(this, "isValid", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.assign(this, props);
    }
    static from(steamId) {
        const groups = steamId.match(/^STEAM\_([0-9]+)\:([0-9]+)\:([0-9]+)$/);
        if (groups) {
            const [x, y, z] = groups.slice(1).map((value) => BigInt(value));
            return new this({
                account: (z << 1n) | y,
                universe: x,
                isValid: true,
            });
        }
        return new this();
    }
    toSteamId64() {
        return this.isValid
            ? (this.universe << 56n) | (this.type << 52n) | (this.instance << 32n) | this.account
            : null;
    }
}
exports.SteamId = SteamId;
var SteamIdResult;
(function (SteamIdResult) {
    SteamIdResult[SteamIdResult["Ok"] = 0] = "Ok";
    SteamIdResult[SteamIdResult["NoPlayerInfoGuid"] = 1] = "NoPlayerInfoGuid";
    SteamIdResult[SteamIdResult["InvalidSteamId"] = 2] = "InvalidSteamId";
})(SteamIdResult || (exports.SteamIdResult = SteamIdResult = {}));
const getPlayerSteamData = (playerInfo) => {
    const guid = playerInfo.data?.guid;
    if (guid === undefined) {
        return [null, SteamIdResult.NoPlayerInfoGuid];
    }
    const steamId = SteamId.from(guid).toSteamId64();
    if (steamId === null) {
        return [guid, SteamIdResult.InvalidSteamId];
    }
    const playerName = playerInfo.data?.name;
    return [
        {
            playerName: playerName ? decodeURIComponent(escape(playerName)) : null,
            steamId: steamId?.toString() ?? null,
        },
        SteamIdResult.Ok,
    ];
};
exports.getPlayerSteamData = getPlayerSteamData;
