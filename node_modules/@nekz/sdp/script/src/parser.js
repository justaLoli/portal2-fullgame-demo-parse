"use strict";
// Copyright (c) 2018-2024, NeKz
// SPDX-License-Identifier: MIT
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceDemoParser = exports.DefaultParsingOptions = void 0;
const buffer_js_1 = require("./buffer.js");
const demo_js_1 = require("./demo.js");
exports.DefaultParsingOptions = {
    header: true,
    messages: true,
    stringTables: false,
    dataTables: false,
    packets: false,
    userCmds: false,
};
class SourceDemoParser {
    constructor(options = exports.DefaultParsingOptions) {
        Object.defineProperty(this, "options", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.options = options;
    }
    static default() {
        return new this(exports.DefaultParsingOptions);
    }
    setOptions(options) {
        this.options = {
            ...this.options,
            ...options,
        };
        return this;
    }
    prepare(buffer) {
        const extended = new Uint8Array(buffer.byteLength + 4 - (buffer.byteLength % 4));
        extended.set(new Uint8Array(buffer), 0);
        return new buffer_js_1.SourceDemoBuffer(extended.buffer);
    }
    parse(buffer) {
        const buf = this.prepare(buffer);
        const demo = demo_js_1.SourceDemo.default();
        if (this.options.header)
            demo.readHeader(buf);
        if (this.options.messages)
            demo.readMessages(buf);
        if (demo.messages?.length) {
            if (this.options.stringTables)
                demo.readStringTables();
            if (this.options.dataTables)
                demo.readDataTables();
            if (this.options.packets)
                demo.readPackets();
            if (this.options.userCmds)
                demo.readUserCmds();
        }
        return demo;
    }
    save(demo, bufferSize) {
        if (!this.options.header || !this.options.header) {
            throw new Error('Cannot save demo without parsed header and messages.');
        }
        if (demo.messages?.length) {
            if (this.options.stringTables)
                demo.writeStringTables();
            if (this.options.dataTables)
                demo.writeDataTables();
            if (this.options.packets)
                demo.writePackets();
            if (this.options.userCmds)
                demo.writeUserCmds();
        }
        const padding = 4 - (bufferSize % 4);
        const extended = new Uint8Array(bufferSize + padding);
        const buf = new buffer_js_1.SourceDemoBuffer(extended.buffer);
        demo.writeHeader(buf);
        demo.writeMessages(buf);
        const result = new Uint8Array(bufferSize);
        result.set(extended.slice(0, bufferSize), 0);
        return result;
    }
}
exports.SourceDemoParser = SourceDemoParser;
