import type { SourceDemoBuffer } from '../buffer.js';
import type { SourceDemo } from '../demo.js';
import type { QAngle } from './QAngle.js';
import type { Vector } from './Vector.js';
export declare class UserMessage {
    type: number;
    constructor(type: number);
    getType(): number;
    getName(): string;
    read(_buf: SourceDemoBuffer, _demo: SourceDemo): void;
    write(_buf: SourceDemoBuffer, _demo: SourceDemo): void;
    as<T extends UserMessage>(): T;
}
export declare class Geiger extends UserMessage {
    geigerRange?: number;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class Train extends UserMessage {
    pos?: number;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class HudText extends UserMessage {
    text?: string;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class SayText extends UserMessage {
    client?: number;
    text?: string;
    wantsToChat?: number;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class SayText2 extends UserMessage {
    client?: number;
    text?: string;
    wantsToChat?: number;
    messageText?: string;
    messages?: [string, string, string, string];
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare enum HudPrint {
    Notify = 1,
    Console = 2,
    Talk = 3,
    Center = 4
}
export declare class TextMsg extends UserMessage {
    msgDest?: HudPrint;
    output?: [string, string, string, string, string];
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export interface HudTextParms {
    x: number;
    y: number;
    effect: number;
    r1: number;
    g1: number;
    b1: number;
    a1: number;
    r2: number;
    g2: number;
    b2: number;
    a2: number;
    fadeinTime: number;
    fadeoutTime: number;
    holdTime: number;
    fxTime: number;
    channel: number;
}
export declare class HudMsg extends UserMessage {
    textParms?: HudTextParms;
    message?: string;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class ResetHUD extends UserMessage {
    reset?: number;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class GameTitle extends UserMessage {
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare class ItemPickup extends UserMessage {
    name?: string;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class ShowMenu extends UserMessage {
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare enum ShakeCommand {
    Start = 0,
    Stop = 1,
    Amplitude = 2,
    Frequency = 3,
    StartRumbleOnly = 4,
    StartNoRumble = 5
}
export declare class Shake extends UserMessage {
    command?: ShakeCommand;
    amplitude?: number;
    frequency?: number;
    duration?: number;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class Tilt extends UserMessage {
    command?: number;
    easeInOut?: number;
    angle?: QAngle;
    duration?: number;
    time?: number;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class Fade extends UserMessage {
    duration?: number;
    holdTime?: number;
    fadeFlags?: number;
    fade?: {
        r: number;
        g: number;
        b: number;
        a: number;
    };
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class VGUIMenu extends UserMessage {
    name?: string;
    show?: number;
    size?: number;
    keyValues?: {
        key: string;
        value: string;
    }[];
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class Rumble extends UserMessage {
    index?: number;
    data?: number;
    flags?: number;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class Battery extends UserMessage {
    battery?: number;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class Damage extends UserMessage {
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare class VoiceMask extends UserMessage {
    audiblePlayers?: [number, number];
    serverBannedPlayers?: [number, number];
    serverModEnabled?: number;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class RequestState extends UserMessage {
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare class CloseCaption extends UserMessage {
    hash?: number;
    duration?: number;
    fromPlayer?: boolean;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class CloseCaptionDirect extends UserMessage {
    hash?: number;
    duration?: number;
    fromPlayer?: boolean;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class HintText extends UserMessage {
    hintString?: string;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class KeyHintText extends UserMessage {
    messages?: 1;
    message?: string;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class SquadMemberDied extends UserMessage {
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare class AmmoDenied extends UserMessage {
    ammo?: number;
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare enum CreditsType {
    Logo = 1,
    Intro = 2,
    Outro = 3
}
export declare class CreditsMsg extends UserMessage {
    creditsType?: CreditsType;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class LogoTimeMsg extends UserMessage {
    time?: number;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class AchievementEvent extends UserMessage {
    achievementId?: number;
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare class UpdateJalopyRadar extends UserMessage {
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare class CurrentTimescale extends UserMessage {
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare enum GameTimescaleInterpolators {
    Linear = 0,
    Accel = 1,
    DeAccel = 2,
    EaseInOut = 3
}
export declare class DesiredTimescale extends UserMessage {
    desiredTimescale?: number;
    durationRealTimeSeconds?: number;
    interpolationType?: GameTimescaleInterpolators;
    startBlendTime?: number;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare enum PortalCreditsType {
    Logo = 1,
    Intro = 2,
    Outro = 3,
    OutroPortal = 4
}
export declare class CreditsPortalMsg extends UserMessage {
    creditsType?: PortalCreditsType;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class InventoryFlash extends UserMessage {
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare class IndicatorFlash extends UserMessage {
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare class ControlHelperAnimate extends UserMessage {
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare class TakePhoto extends UserMessage {
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare class Flash extends UserMessage {
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare class HudPingIndicator extends UserMessage {
    position?: Vector;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class OpenRadialMenu extends UserMessage {
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare class AddLocator extends UserMessage {
    playerIndex?: number;
    entityHandle?: number;
    displayTime?: number;
    position?: Vector;
    normal?: Vector;
    iconName?: string;
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare class MPMapCompleted extends UserMessage {
    branch?: number;
    level?: number;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class MPMapIncomplete extends UserMessage {
    branch?: number;
    level?: number;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class MPMapCompletedData extends UserMessage {
    levelCompletions?: boolean[][][];
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare class MPTauntEarned extends UserMessage {
    taunt?: string;
    awardSilently?: boolean;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class MPTauntUnlocked extends UserMessage {
    taunt?: string;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class MPTauntLocked extends UserMessage {
    taunt?: string;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class MPAllTauntsLocked extends UserMessage {
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare enum PortalFizzleType {
    Success = 0,
    CantFit = 1,
    OverlappedLinked = 2,
    BadVolume = 3,
    BadSurface = 4,
    Killed = 5,
    Cleanser = 6,
    Close = 7,
    NearBlue = 8,
    NearRed = 9,
    None = 10
}
export declare class PortalFX_Surface extends UserMessage {
    entIndex?: number;
    playerEntIndex?: number;
    team?: number;
    portalNum?: number;
    effect?: PortalFizzleType;
    vecOrigin?: Vector;
    angles?: QAngle;
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare class PaintWorld extends UserMessage {
    unk1?: number;
    unk2?: number;
    unk3?: number;
    unk4?: number;
    unk5?: number;
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare class PaintEntity extends UserMessage {
    unk1?: number;
    unk2?: number;
    unk3?: number;
    unk4?: number;
    unk5?: number;
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare class ChangePaintColor extends UserMessage {
    unk1?: number;
    unk2?: number;
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare class PaintBombExplode extends UserMessage {
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare class RemoveAllPaint extends UserMessage {
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare class PaintAllSurfaces extends UserMessage {
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare class RemovePaint extends UserMessage {
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare class StartSurvey extends UserMessage {
    handle?: number;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class ApplyHitBoxDamageEffect extends UserMessage {
    entityHandle?: number;
    effectIndex?: number;
    hits?: number;
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare class SetMixLayerTriggerFactor extends UserMessage {
    layer?: string;
    group?: string;
    factor?: number;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class TransitionFade extends UserMessage {
    fade?: number;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class ScoreboardTempUpdate extends UserMessage {
    portalScore?: number;
    timeScore?: number;
    read(buf: SourceDemoBuffer): void;
    write(buf: SourceDemoBuffer): void;
}
export declare class ChallengeModeCheatSession extends UserMessage {
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare class ChallengeModeCloseAllUI extends UserMessage {
    read(_buf: SourceDemoBuffer): void;
    write(_buf: SourceDemoBuffer): void;
}
export declare const UserMessages: {
    Portal2Engine: (typeof GameTitle)[];
};
//# sourceMappingURL=UserMessages.d.ts.map